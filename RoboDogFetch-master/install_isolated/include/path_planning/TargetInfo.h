// Generated by gencpp from file path_planning/TargetInfo.msg
// DO NOT EDIT!


#ifndef PATH_PLANNING_MESSAGE_TARGETINFO_H
#define PATH_PLANNING_MESSAGE_TARGETINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace path_planning
{
template <class ContainerAllocator>
struct TargetInfo_
{
  typedef TargetInfo_<ContainerAllocator> Type;

  TargetInfo_()
    : target_type()
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
    }
  TargetInfo_(const ContainerAllocator& _alloc)
    : target_type(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_type_type;
  _target_type_type target_type;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::path_planning::TargetInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_planning::TargetInfo_<ContainerAllocator> const> ConstPtr;

}; // struct TargetInfo_

typedef ::path_planning::TargetInfo_<std::allocator<void> > TargetInfo;

typedef boost::shared_ptr< ::path_planning::TargetInfo > TargetInfoPtr;
typedef boost::shared_ptr< ::path_planning::TargetInfo const> TargetInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_planning::TargetInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_planning::TargetInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::path_planning::TargetInfo_<ContainerAllocator1> & lhs, const ::path_planning::TargetInfo_<ContainerAllocator2> & rhs)
{
  return lhs.target_type == rhs.target_type &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::path_planning::TargetInfo_<ContainerAllocator1> & lhs, const ::path_planning::TargetInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace path_planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::path_planning::TargetInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planning::TargetInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_planning::TargetInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_planning::TargetInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning::TargetInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning::TargetInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_planning::TargetInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69b7a3e3b636f94340436ebfca78e609";
  }

  static const char* value(const ::path_planning::TargetInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69b7a3e3b636f943ULL;
  static const uint64_t static_value2 = 0x40436ebfca78e609ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_planning::TargetInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_planning/TargetInfo";
  }

  static const char* value(const ::path_planning::TargetInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_planning::TargetInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string target_type\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::path_planning::TargetInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_planning::TargetInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_type);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TargetInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_planning::TargetInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_planning::TargetInfo_<ContainerAllocator>& v)
  {
    s << indent << "target_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target_type);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_PLANNING_MESSAGE_TARGETINFO_H
